import { defineComponent, computed } from "vue";
import { p as pick, o as omit } from "../../../vendor-2b2dbafd.mjs";
import { u as useColumnsProps, a as useColumns } from "./hooks/useColumns-585e5995.mjs";
import { u as usePaginatedRowsProps, a as usePaginatedRows } from "./hooks/usePaginatedRows-f3fd32b2.mjs";
import { u as useSelectableProps, a as useSelectableRow } from "./hooks/useSelectableRow-98d377f8.mjs";
import { u as useStylableProps, a as useStylable } from "./hooks/useStylable-39e1eb4b.mjs";
import { u as useBindingProps, a as useBinding } from "./hooks/useBinding-84ec971a.mjs";
import { u as useAnimationNameProps, a as useAnimationName } from "./hooks/useAnimationName-650cd4ce.mjs";
import { u as useRowsProps, a as useRows } from "./hooks/useRows-da424085.mjs";
import { u as useFilterableProps, a as useFilterable } from "./hooks/useFilterable-334f2b56.mjs";
import { u as useSortableProps, a as useSortable } from "./hooks/useSortable-c84a6b96.mjs";
import { u as useTableScrollProps, a as useTableScrollEmits, b as useTableScroll } from "./hooks/useTableScroll-fc12477e.mjs";
import { V as VaDataTableThRow } from "./components/index-f7363ae5.mjs";
import { V as VaVirtualScroller } from "../va-virtual-scroller/index-387fc959.mjs";
import { V as VaInnerLoading } from "../va-inner-loading/index-b6cd142b.mjs";
import { V as VaCheckbox } from "../va-checkbox/index-6f6eafc1.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options-6b96d215.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useThrottleProps } from "../../composables/useThrottle-cdbdff3a.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props-9727421a.mjs";
import { u as useTranslation } from "../../composables/useTranslation-5e716487.mjs";
const VaVirtualScrollerProps = extractComponentProps(VaVirtualScroller, ["items", "trackBy", "horizontal", "disabled", "table"]);
const VaDataTableThRowProps = extractComponentProps(VaDataTableThRow);
const _sfc_main = defineComponent({
  name: "VaDataTable",
  components: {
    VaDataTableThRow,
    VaVirtualScroller,
    VaInnerLoading,
    VaCheckbox
  },
  inheritAttrs: false,
  props: {
    ...useComponentPresetProp,
    ...VaVirtualScrollerProps,
    ...useAnimationNameProps,
    ...useBindingProps,
    ...useTableScrollProps,
    ...useSortableProps,
    ...useStylableProps,
    ...useColumnsProps,
    ...useFilterableProps,
    ...usePaginatedRowsProps,
    ...useRowsProps,
    ...useSelectableProps,
    ...useThrottleProps,
    ...pick(VaDataTableThRowProps, ["ariaSelectAllRowsLabel", "ariaSortColumnByLabel"]),
    hoverable: { type: Boolean, default: false },
    clickable: { type: Boolean, default: false },
    loading: { type: Boolean, default: false },
    loadingColor: { type: String, default: "primary" },
    noDataHtml: { type: String, default: "No items" },
    noDataFilteredHtml: { type: String, default: "No items match the provided filtering condition" },
    hideDefaultHeader: { type: Boolean, default: false },
    footerClone: { type: Boolean, default: false },
    striped: { type: Boolean, default: false },
    virtualScroller: { type: Boolean, default: false },
    virtualTrackBy: { type: [String, Number], default: "initialIndex" },
    grid: { type: Boolean, default: false },
    gridColumns: { type: Number, default: 0 },
    wrapperSize: { type: [Number, String], default: "auto" },
    ariaSelectRowLabel: { type: String, default: "$t:selectRowByIndex" }
  },
  emits: [
    "update:modelValue",
    // `modelValue` is selectedItems
    "update:sortBy",
    "update:sortingOrder",
    "filtered",
    "sorted",
    "selectionChange",
    "row:click",
    "row:dblclick",
    "row:contextmenu",
    ...useTableScrollEmits
  ],
  setup(props, { attrs, emit }) {
    const { columnsComputed } = useColumns(props);
    const { rowsComputed } = useRows(columnsComputed, props);
    const { filteredRows } = useFilterable(rowsComputed, props, emit);
    const {
      sortBySync,
      sortingOrderSync,
      toggleSorting,
      sortedRows,
      sortingOrderIconName
    } = useSortable(columnsComputed, filteredRows, props, emit);
    const { paginatedRows } = usePaginatedRows(sortedRows, props);
    const {
      ctrlSelectRow,
      shiftSelectRows,
      toggleBulkSelection,
      isRowSelected,
      severalRowsSelected,
      allRowsSelected,
      toggleRowSelection
    } = useSelectableRow(paginatedRows, props, emit);
    const {
      CSSVariables,
      getCellCSSVariables,
      getClass,
      getStyle
    } = useStylable(props);
    const { getRowBind, getCellBind } = useBinding(props);
    const animationName = useAnimationName(props, paginatedRows);
    const showNoDataHtml = computed(() => props.items.length === 0);
    const showNoDataFilteredHtml = computed(() => paginatedRows.value.length === 0);
    const onRowClickHandler = (name, event, row) => {
      emit(name, {
        event,
        item: row.source,
        itemIndex: row.initialIndex,
        row
      });
      if (props.selectable && props.grid) {
        toggleRowSelection(row);
      }
    };
    const computedTableAttributes = computed(() => ({
      ...omit(attrs, ["class", "style"]),
      class: pick(props, ["striped", "selectable", "hoverable", "clickable"])
    }));
    const filteredVirtualScrollerProps = filterComponentProps(VaVirtualScrollerProps);
    const virtualScrollerPropsComputed = computed(() => ({
      ...filteredVirtualScrollerProps.value,
      items: paginatedRows.value,
      trackBy: props.virtualTrackBy,
      disabled: !props.virtualScroller,
      table: true
    }));
    const computedAttributes = computed(() => ({
      class: [
        { "va-data-table--sticky": props.stickyHeader || props.stickyFooter },
        { "va-data-table--scroll": !!props.height },
        { "va-data-table--virtual-scroller": isVirtualScroll.value },
        { "va-data-table--grid": props.grid },
        attrs.class
      ],
      style: [attrs.style],
      ...virtualScrollerPropsComputed.value
    }));
    const filteredThProps = filterComponentProps(VaDataTableThRowProps);
    const thAttributesComputed = computed(() => ({
      ...filteredThProps.value,
      columns: columnsComputed.value,
      sortingOrderIconName: sortingOrderIconName.value,
      severalRowsSelected: severalRowsSelected.value,
      sortingOrderSync: sortingOrderSync.value,
      allRowsSelected: allRowsSelected.value,
      sortBySync: sortBySync.value
    }));
    const {
      scrollContainer,
      topTrigger,
      bottomTrigger,
      doRenderTopTrigger,
      doRenderBottomTrigger
    } = useTableScroll(props, emit);
    const isVirtualScroll = computed(() => props.virtualScroller && !props.grid);
    const gridColumnsCount = computed(() => props.gridColumns || "var(--va-data-table-grid-tbody-columns)");
    return {
      ...useTranslation(),
      scrollContainer,
      topTrigger,
      bottomTrigger,
      columnsComputed,
      ctrlSelectRow,
      shiftSelectRows,
      toggleBulkSelection,
      isRowSelected,
      toggleSorting,
      CSSVariables,
      getCellCSSVariables,
      getClass,
      getStyle,
      thAttributesComputed,
      showNoDataHtml,
      showNoDataFilteredHtml,
      onRowClickHandler,
      computedAttributes,
      computedTableAttributes,
      animationName,
      getRowBind,
      getCellBind,
      doRenderTopTrigger,
      doRenderBottomTrigger,
      isVirtualScroll,
      gridColumnsCount
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaDataTable.css';
//# sourceMappingURL=VaDataTable.vue_vue_type_script_lang-ea5dce96.mjs.map
