import { defineComponent, computed } from "vue";
import { a as useSidebarItem } from "../hooks/useSidebar-00350440.mjs";
import { u as useComponentPresetProp } from "../../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useRouterLinkProps, a as useRouterLink } from "../../../composables/useRouterLink-01f82045.mjs";
import { u as useElementRef } from "../../../composables/useElementRef-9cfaf4d1.mjs";
import { u as useHover } from "../../../composables/useHover-88d786c8.mjs";
import { u as useColors } from "../../../composables/useColors-0fd00a23.mjs";
import { u as useKeyboardOnlyFocus } from "../../../composables/useKeyboardOnlyFocus-2734fefc.mjs";
import { e as applyColors } from "../../../services/color/utils-e7c3fc9a.mjs";
import { u as useTextColor } from "../../../composables/useTextColor-c44b4947.mjs";
const _sfc_main = defineComponent({
  name: "VaSidebarItem",
  props: {
    ...useRouterLinkProps,
    ...useComponentPresetProp,
    active: { type: Boolean, default: false },
    textColor: { type: String, default: void 0 },
    activeColor: { type: String, default: "primary" },
    hoverColor: { type: String, default: void 0 },
    hoverOpacity: { type: Number, default: 0.2 },
    borderColor: { type: String, default: void 0 }
  },
  setup(props) {
    const rootElement = useElementRef();
    const sidebar = useSidebarItem();
    const { isHovered } = useHover(rootElement);
    const { getColor, getHoverColor, getFocusColor } = useColors();
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const backgroundColorComputed = computed(() => {
      if (props.active && !isHovered.value && !hasKeyboardFocus.value) {
        return getColor(props.activeColor);
      }
      if (hasKeyboardFocus.value) {
        return getFocusColor(getColor(props.hoverColor || props.activeColor));
      }
      return "#ffffff00";
    });
    const textBackground = computed(() => applyColors(getColor(sidebar == null ? void 0 : sidebar.color), backgroundColorComputed.value));
    const { textColorComputed } = useTextColor(textBackground);
    const computedStyle = computed(() => {
      const style = { color: textColorComputed.value };
      if (isHovered.value || props.active || hasKeyboardFocus.value) {
        style.backgroundColor = backgroundColorComputed.value;
      }
      if (props.active) {
        const mergedProps = { ...sidebar, ...props };
        style.borderColor = getColor(mergedProps.borderColor || mergedProps.activeColor);
      }
      if (hasKeyboardFocus.value) {
        style.backgroundColor = getFocusColor(getColor(props.hoverColor || props.activeColor));
      }
      if (isHovered.value) {
        style.backgroundColor = getHoverColor(
          getColor(props.hoverColor || props.activeColor),
          props.hoverOpacity
        );
      }
      return style;
    });
    const { tagComputed, hrefComputed, linkAttributesComputed } = useRouterLink(props);
    return {
      rootElement,
      computedStyle,
      keyboardFocusListeners,
      tagComputed,
      hrefComputed,
      isHovered,
      backgroundColorComputed,
      bg: getColor(sidebar == null ? void 0 : sidebar.color),
      textBackground,
      linkAttributesComputed
    };
  }
});
export {
  _sfc_main as _
};

import '../../../../VaSidebarItem.css';
//# sourceMappingURL=VaSidebarItem.vue_vue_type_script_lang-00db4559.mjs.map
