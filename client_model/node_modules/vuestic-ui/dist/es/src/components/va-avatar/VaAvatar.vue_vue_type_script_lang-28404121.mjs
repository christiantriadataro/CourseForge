import { defineComponent, computed, ref, watch } from "vue";
import { p as pick } from "../../../vendor-2b2dbafd.mjs";
import { V as VaIcon } from "../va-icon/index-e392594f.mjs";
import { V as VaProgressCircle } from "../va-progress-circle/index-000df00b.mjs";
import { V as VaFallback } from "../va-fallback/index-524dd751.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options-6b96d215.mjs";
import { u as useLoadingProps } from "../../composables/useLoading-5a447e96.mjs";
import { u as useSizeProps, a as useSize } from "../../composables/useSize-a25f2550.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useColors } from "../../composables/useColors-0fd00a23.mjs";
import { u as useTextColor } from "../../composables/useTextColor-c44b4947.mjs";
import { u as useBem } from "../../composables/useBem-33d80128.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props-9727421a.mjs";
const VaFallbackProps = extractComponentProps(VaFallback);
const _sfc_main = defineComponent({
  name: "VaAvatar",
  components: { VaIcon, VaProgressCircle, VaFallback },
  props: {
    ...useLoadingProps,
    ...useSizeProps,
    ...useComponentPresetProp,
    ...VaFallbackProps,
    color: { type: String, default: "primary" },
    textColor: { type: String },
    square: { type: Boolean, default: false },
    fontSize: { type: String, default: "" },
    src: { type: String, default: null },
    icon: { type: String, default: "" },
    alt: { type: String, default: "" }
  },
  emits: ["error", "fallback"],
  setup(props, { emit }) {
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const backgroundColorComputed = computed(() => {
      if (props.loading || props.src && !hasLoadError.value) {
        return "transparent";
      }
      return colorComputed.value;
    });
    const { sizeComputed, fontSizeComputed } = useSize(props, "VaAvatar");
    const { textColorComputed } = useTextColor();
    const computedStyle = computed(() => ({
      fontSize: props.fontSize || fontSizeComputed.value
    }));
    const classesComputed = useBem("va-avatar", () => ({
      ...pick(props, ["square"])
    }));
    const hasLoadError = ref(false);
    const onLoadError = (event) => {
      hasLoadError.value = true;
      emit("error", event);
    };
    watch(() => props.src, () => {
      hasLoadError.value = false;
    });
    const avatarOptions = computed(() => ({
      hasError: hasLoadError.value,
      onError: onLoadError
    }));
    return {
      hasLoadError,
      sizeComputed,
      avatarOptions,
      computedStyle,
      colorComputed,
      classesComputed,
      textColorComputed,
      backgroundColorComputed,
      VaFallbackProps: filterComponentProps(VaFallbackProps),
      onLoadError
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaAvatar.css';
//# sourceMappingURL=VaAvatar.vue_vue_type_script_lang-28404121.mjs.map
