import { computed, unref, watch } from "vue";
import { u as useSyncProp } from "./useSyncProp-326abeda.mjs";
import { V as VaDropdown } from "../components/va-dropdown/index-85059283.mjs";
import { e as extractComponentProps } from "../utils/component-options/extract-component-options-6b96d215.mjs";
import { f as filterComponentProps } from "../utils/component-options/filter-props-9727421a.mjs";
const VaDropdownProps = extractComponentProps(
  VaDropdown,
  ["innerAnchorSelector", "stateful", "keyboardNavigation", "modelValue"]
);
const useDropdownableProps = {
  ...VaDropdownProps,
  modelValue: {},
  /**
   * Close dropdown on value updated.
   * @default null - behavior controlled by component
   */
  closeOnChange: { type: Boolean, default: null },
  isOpen: { type: Boolean, default: void 0 }
};
const useDropdownableEmits = ["update:isOpen"];
const useDropdownable = function(props, emit, options = {}) {
  const [isOpenSync] = useSyncProp("isOpen", props, emit, false);
  const doWatch = computed(() => props.closeOnChange !== null ? props.closeOnChange : unref(options.defaultCloseOnValueUpdate || false));
  watch(() => props.modelValue, () => {
    if (doWatch.value) {
      isOpenSync.value = false;
    }
  });
  return {
    dropdownProps: filterComponentProps(VaDropdownProps),
    isOpenSync
  };
};
export {
  useDropdownableEmits as a,
  useDropdownable as b,
  useDropdownableProps as u
};
//# sourceMappingURL=useDropdownable-f36d3f5b.mjs.map
