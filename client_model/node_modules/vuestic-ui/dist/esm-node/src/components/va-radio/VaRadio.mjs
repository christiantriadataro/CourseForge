import { _ as _sfc_main } from "./VaRadio.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createBlock, normalizeStyle, withCtx, createElementBlock, Fragment, renderList, normalizeClass, createElementVNode, mergeProps, renderSlot, normalizeProps, guardReactiveProps, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
const VaRadio_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = ["value", "checked", "aria-checked", "onChange"];
const _hoisted_2 = /* @__PURE__ */ createElementVNode("span", {
  "aria-hidden": "true",
  class: "va-radio__icon"
}, [
  /* @__PURE__ */ createElementVNode("span", { class: "va-radio__icon__background" }),
  /* @__PURE__ */ createElementVNode("span", { class: "va-radio__icon__dot" })
], -1);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_VaMessageListWrapper = resolveComponent("VaMessageListWrapper");
  return openBlock(), createBlock(_component_VaMessageListWrapper, {
    disabled: _ctx.disabled,
    success: _ctx.success,
    messages: _ctx.messages,
    error: _ctx.computedError,
    "error-messages": _ctx.computedErrorMessages,
    "error-count": _ctx.errorCount,
    role: _ctx.roleComputed,
    onBlur: _ctx.onBlur,
    ref: "container",
    style: normalizeStyle(`--va-0-label-style-color: ${String(_ctx.labelStyle.color)};--va-1-icon-computed-styles-border-color: ${String(_ctx.iconComputedStyles.borderColor)};--va-2-icon-dot-computed-styles-border-color: ${String(_ctx.iconDotComputedStyles.borderColor)};--va-3-icon-dot-computed-styles-background-color: ${String(_ctx.iconDotComputedStyles.backgroundColor)};--va-4-icon-background-computed-styles-background-color: ${String(_ctx.iconBackgroundComputedStyles.backgroundColor)}`)
  }, {
    default: withCtx(() => [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.computedOptions, (option, index) => {
        return openBlock(), createElementBlock("label", {
          key: index,
          class: normalizeClass([_ctx.radioClass(option), "va-radio va-radio__square"])
        }, [
          createElementVNode("input", mergeProps({
            ref_for: true,
            ref: "input",
            class: "va-radio__input",
            type: "radio",
            role: "radio",
            value: _ctx.isChecked(option),
            checked: _ctx.isChecked(option),
            "aria-checked": _ctx.isChecked(option)
          }, _ctx.inputAttributesComputed(option), {
            onChange: ($event) => _ctx.selectOption(_ctx.getValue(option), $event),
            onFocus: _cache[0] || (_cache[0] = (...args) => _ctx.onFocus && _ctx.onFocus(...args)),
            onBlur: _cache[1] || (_cache[1] = (...args) => _ctx.onBlur && _ctx.onBlur(...args))
          }), null, 16, _hoisted_1),
          renderSlot(_ctx.$slots, "icon", normalizeProps(guardReactiveProps({
            value: _ctx.isChecked(option),
            text: _ctx.getText(option),
            disabled: _ctx.getDisabled(option)
          })), () => [
            _hoisted_2
          ]),
          _ctx.getText(option) || _ctx.$slots.default ? (openBlock(), createElementBlock("span", {
            key: 0,
            ref_for: true,
            ref: "label",
            class: "va-radio__text"
          }, [
            renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({
              value: _ctx.isChecked(option),
              text: _ctx.getText(option),
              disabled: _ctx.getDisabled(option)
            })), () => [
              createTextVNode(toDisplayString(_ctx.getText(option)), 1)
            ])
          ], 512)) : createCommentVNode("", true)
        ], 2);
      }), 128))
    ]),
    _: 3
  }, 8, ["disabled", "success", "messages", "error", "error-messages", "error-count", "role", "onBlur", "style"]);
}
const _VaRadio = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaRadio as _
};
//# sourceMappingURL=VaRadio.mjs.map
